import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";
import morgan from "morgan";
import rateLimit from "express-rate-limit";
import { fileURLToPath } from "url";

dotenv.config();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// --- Config ---
const PORT = process.env.PORT || 3000;
const CORS_ORIGIN = process.env.CORS_ORIGIN || "*";

// --- Middlewares ---
app.use(cors({ origin: CORS_ORIGIN }));
app.use(express.json({ limit: "1mb" }));
app.use(morgan("tiny"));
app.set("trust proxy", 1);

const limiter = rateLimit({
  windowMs: 60_000,
  max: 60,
  standardHeaders: true,
  legacyHeaders: false
});
app.use(limiter);

// --- Health ---
app.get("/health", (_req, res) => {
  res.json({ ok: true, status: "healthy" });
});

// --- Directory (matches the app) ---
const dirPath = path.join(__dirname, "data", "ai-directory.json");
let directory = { ok: true, count: 0, items: [] };

try {
  const raw = fs.readFileSync(dirPath, "utf-8");
  directory = JSON.parse(raw);
  if (!Array.isArray(directory.items)) {
    // tolerate object map -> convert to array
    directory.items = Object.values(directory.items || {});
  }
  directory.count = directory.items.length;
} catch (e) {
  console.error("Failed to load ai-directory.json:", e.message);
}

app.get("/ai-directory", (_req, res) => {
  res.json(directory);
});

app.get("/ai-directory/search", (req, res) => {
  const q = (req.query.q || "").toString().trim().toLowerCase();
  if (!q) return res.json(directory);

  const items = directory.items.filter((c) => {
    const haystack = [
      c.name,
      c.category,
      c.summary,
      ...(Array.isArray(c.use_cases) ? c.use_cases : [])
    ]
      .join(" ")
      .toLowerCase();
    return haystack.includes(q);
  });

  res.json({ ok: true, count: items.length, items });
});

// --- Ask (mock fan-out; good enough for first live) ---
app.post("/ask", (req, res) => {
  const prompt = (req.body?.prompt || "").toString();
  const demoAnswers = [
    { provider: "ChatGPT", text: `Demo answer for: “${prompt}” (ChatGPT)` },
    { provider: "Claude",  text: `Demo answer for: “${prompt}” (Claude)` },
    { provider: "Gemini",  text: `Demo answer for: “${prompt}” (Gemini)` }
  ];
  res.json({ prompt, answers: demoAnswers });
});

// --- Start ---
app.listen(PORT, () => {
  console.log(`Artiligenz backend listening on :${PORT}`);
});
